#ifndef TOKEN_TYPES_H_
#define TOKEN_TYPES_H_

typedef enum
{
	// Start the IDs somewhat high to avoid colliding with builtin values.
	TOK_UNRECOGNIZED = 100,

 	TOK_ADD,
	TOK_ADD_EQ,
	TOK_AMPERSAND,
	TOK_AND,
	TOK_ARROW,
	TOK_ASS_EQ,
	TOK_AT_SIGN,
	TOK_BIT_NOT,
	TOK_BIT_OR,
	TOK_BIT_SLL,
	TOK_BIT_SRA,
	TOK_BIT_SRL,
	TOK_BIT_XOR,
	TOK_BREAK,
	TOK_CMP_EQ,
	TOK_CMP_GE,
	TOK_CMP_GT,
	TOK_CMP_LE,
	TOK_CMP_LT,
	TOK_CMP_NE,
	TOK_COLON,
	TOK_COMMA,
	TOK_COMMENT,
	TOK_CONTINUE,
	TOK_DATA,
	TOK_DECR,
	TOK_DIV,
	TOK_DIV_EQ,
	TOK_ELSE,
	TOK_EXP,
	TOK_EXPORT,
	TOK_FALSE,
	TOK_FOR,
	TOK_FOREACH,
	TOK_FUNCTION,
	TOK_GLOBAL,
	TOK_IDENT,
	TOK_IF,
	TOK_IMPORT,
	TOK_INCLUDE,
	TOK_INCR,
	TOK_INTEGER,
	TOK_LBRACE,
	TOK_LBRACK,
	TOK_LOCAL,
	TOK_LPAREN,
	TOK_MOD,
	TOK_MOD_EQ,
	TOK_MUL,
	TOK_MUL_EQ,
	TOK_NOT,
	TOK_OR,
	TOK_PERIOD,
	TOK_RBRACE,
	TOK_RBRACK,
	TOK_REGEX_EQ,
	TOK_REGEX_NE,
	TOK_REP,
	TOK_REPEAT,
	TOK_RETURN,
	TOK_RPAREN,
	TOK_SEMICOLON,
	TOK_SLL_EQ,
	TOK_SRA_EQ,
	TOK_SRL_EQ,
	TOK_STRING,
	TOK_SUB,
	TOK_SUBSTR_EQ,
	TOK_SUBSTR_NE,
	TOK_SUB_EQ,
	TOK_TRUE,
	TOK_UMINUS,
	TOK_UNDEF,
	TOK_UNTIL,
	TOK_WHILE
} tok_id_t;

struct token_type
{
	const tok_id_t	 num;
	const char	*str;
};

#endif
